{"version":3,"sources":["components/City.js","components/Cities.js","App.js","index.js"],"names":["City","state","renderCity","city","props","IM","ME","sunrise","dayjs","sys","format","sunset","iconURL","weather","icon","className","style","width","name","src","alt","description","main","temp","feels_like","humidity","wind","speed","temp_min","temp_max","Fragment","this","Component","querystring","require","api","Cities","timestamp","cities","fetchWeatherData","units","Date","map","index","length","parameters","appid","key","q","url","stringify","axios","get","getData","a","data_metric","data_imperial","date","city_ME","data","city_IM","console","log","setState","renderCities","jsx","i","push","componentDidMount","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yaAuGeA,E,4MAnGbC,MAAQ,G,EAERC,WAAa,WAAO,IACVC,EAAS,EAAKC,MAAdD,KACAE,EAAWF,EAAXE,GAAIC,EAAOH,EAAPG,GAENC,EAAUC,IAAMH,EAAGI,IAAIF,SAASG,OAAO,SACvCC,EAASH,IAAMH,EAAGI,IAAIE,QAAQD,OAAO,SACrCE,EAAO,0CAAsCP,EAAGQ,QAAQ,GAAGC,KAApD,QAEb,OACE,yBAAKC,UAAU,4BAA4BC,MAAO,CAAEC,MAAO,UACzD,yBAAKF,UAAU,eACb,wBAAIA,UAAU,wBAAwBZ,EAAKe,MAC3C,yBAAKH,UAAU,UACb,yBACEI,IAAKP,EACLG,UAAU,YACVK,IAAI,qBAEN,wBAAIL,UAAU,uBAAuBV,EAAGQ,QAAQ,GAAGQ,cAGrD,yBAAKN,UAAU,oBACb,wBAAIA,UAAU,uBAAuBV,EAAGiB,KAAKC,MAC7C,uBAAGR,UAAU,uBAAb,WAEA,wBAAIA,UAAU,uBAAd,MAAwCT,EAAGgB,KAAKC,MAChD,uBAAGR,UAAU,uBAAb,aAGJ,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SACb,wBAAIA,UAAU,uBAAd,eACA,yBAAKA,UAAU,oBACb,4BAAKV,EAAGiB,KAAKE,YACb,uBAAGT,UAAU,uBAAb,WACA,iCAAOT,EAAGgB,KAAKE,YACf,uBAAGT,UAAU,uBAAb,aAIJ,yBAAKA,UAAU,SACb,yBAAKA,UAAU,uDACb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,uBAAd,aACA,wBAAIA,UAAU,uBAAuBV,EAAGiB,KAAKG,SAA7C,MAEF,yBAAKV,UAAU,OACb,wBAAIA,UAAU,uBAAd,SACA,yBAAKA,UAAU,oBACb,wBAAIA,UAAU,uBAAuBV,EAAGqB,KAAKC,OAC7C,uBAAGZ,UAAU,uBAAb,OACA,wBAAIA,UAAU,uBAAd,KAAuCT,EAAGoB,KAAKC,OAC/C,uBAAGZ,UAAU,uBAAb,aAOZ,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,sBACb,wBAAIA,UAAU,uBAAd,QACA,yBAAKA,UAAU,oBACb,4BAAKV,EAAGiB,KAAKM,UACb,uBAAGb,UAAU,uBAAb,WACA,iCAAOT,EAAGgB,KAAKM,UACf,uBAAGb,UAAU,uBAAb,aAGJ,yBAAKA,UAAU,sBACb,wBAAIA,UAAU,uBAAd,SACA,yBAAKA,UAAU,oBACb,4BAAKV,EAAGiB,KAAKO,UACb,uBAAGd,UAAU,uBAAb,WACA,iCAAOT,EAAGgB,KAAKO,UACf,uBAAGd,UAAU,uBAAb,cAIN,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,sBACb,wBAAIA,UAAU,aAAd,YAAoCR,IAEtC,yBAAKQ,UAAU,sBACb,wBAAIA,UAAU,aAAd,WAAmCJ,O,uDAQ3C,OAAO,kBAAC,IAAMmB,SAAP,KAAiBC,KAAK7B,kB,GAhGd8B,a,iBCCbC,EAAcC,EAAQ,IACtBC,EAAMD,EAAQ,IAyGLE,E,4MAtGbnC,MAAQ,CACNoC,UAAW,GACXC,OAAQ,CACN,CACEpB,KAAM,WACNZ,GAAI,GACJD,GAAI,IAEN,CACEa,KAAM,WACNZ,GAAI,GACJD,GAAI,M,EAKVkC,iBAAmB,SAACD,EAAQE,GAGb,IAAIC,KAGjBH,EAAOI,KAAI,SAACvC,EAAMwC,GACAxC,EAAKe,KACjByB,IAAUL,EAAOM,OAAS,GACZ,OAGpB,IAAMC,EAAa,CACjBC,MAAOX,EAAIY,IACXP,MAAOA,EACPQ,EAAGV,EAAO,GAAGpB,MAGT+B,EAAG,0DAAsDhB,EAAYiB,UACzEL,IAGF,OAAOM,IAAMC,IAAIH,I,EAInBI,Q,sBAAU,wCAAAC,EAAA,sEACkB,EAAKf,iBAC7B,EAAKtC,MAAMqC,OACX,UAHM,cACFiB,EADE,gBAKoB,EAAKhB,iBAC/B,EAAKtC,MAAMqC,OACX,YAPM,OAKFkB,EALE,OAUFC,EAAOjD,MAAQE,OAAO,kBAExB6C,GAAeC,IACblB,EAD4B,YACf,EAAKrC,MAAMqC,QACxBnC,EAF4B,eAEhBmC,EAAO,IAFS,eAGbA,EAAO,GAAGhC,IAHG,eAIbgC,EAAO,GAAGjC,IAE7BqD,EAAUH,EAAYI,KACtBC,EAAUJ,EAAcG,KAExBxD,EAAO,CAAEe,KAAMf,EAAKe,KAAMb,GAAIuD,EAAStD,GAAIoD,GAC3CpB,EAAO,GAAKnC,EACZ0D,QAAQC,IAAIxB,GACZ,EAAKyB,SAAS,CACZ1B,UAAWoB,EACXnB,YA1BI,2C,EA+BV0B,aAAe,WAIb,IADA,IAAIC,EAAM,GACDC,EAAI,EAAGA,EAAI,EAAKjE,MAAMqC,OAAOM,OAAQsB,IACxC,EAAKjE,MAAMqC,OAAO4B,GAAG7D,GAAGiB,MAC1B2C,EAAIE,KAAK,kBAAC,EAAD,CAAMpB,IAAKmB,EAAG/D,KAAM,EAAKF,MAAMqC,OAAO4B,MAEnD,OAAOD,G,EAGTG,kBAAoB,WAClB,EAAKf,W,uDAGG,IACAhB,EAAcN,KAAK9B,MAAnBoC,UACR,OACE,6BAGGA,EAAUO,OAAS,EAAI,4BAAKb,KAAK9B,MAAMoC,WAAkB,KAEzDN,KAAKiC,oB,GAjGOhC,aCONqC,MAVf,WACE,OACE,yBAAKtD,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCFRuD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.9bc67eb6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport dayjs from \"dayjs\";\n\nclass City extends Component {\n  state = {};\n\n  renderCity = () => {\n    const { city } = this.props;\n    const { IM, ME } = city;\n\n    const sunrise = dayjs(IM.sys.sunrise).format(\"h:mma\");\n    const sunset = dayjs(IM.sys.sunset).format(\"h:mma\");\n    const iconURL = `http://openweathermap.org/img/w/${IM.weather[0].icon}.png`;\n\n    return (\n      <div className=\"card bg-primary container\" style={{ width: \"40rem\" }}>\n        <div className=\"card-header\">\n          <h1 className=\"card-title text-left\">{city.name}</h1>\n          <div className=\"d-flex\">\n            <img\n              src={iconURL}\n              className=\"img-fluid\"\n              alt=\"Responsive image\"\n            ></img>\n            <h2 className=\"card-text text-left\">{IM.weather[0].description}</h2>\n          </div>\n\n          <div className=\"d-flex flex-wrap\">\n            <h1 className=\"card-text text-left\">{IM.main.temp}</h1>\n            <p className=\"card-text text-left\">˚F</p>\n\n            <h1 className=\"card-text text-left\"> / {ME.main.temp}</h1>\n            <p className=\"card-text text-left\">˚C</p>\n          </div>\n        </div>\n        <div className=\"card-body\">\n          <div className=\"row\">\n            <div className=\"col-6\">\n              <h4 className=\"card-text text-left\">Feels like:</h4>\n              <div className=\"d-flex flex-wrap\">\n                <h4>{IM.main.feels_like}</h4>\n                <p className=\"card-text text-left\">˚F</p>\n                <h4>/ {ME.main.feels_like}</h4>\n                <p className=\"card-text text-left\">˚C</p>\n              </div>\n            </div>\n\n            <div className=\"col-6\">\n              <div className=\"d-flex justify-content-center flex-column flex-wrap\">\n                <div className=\"p-2\">\n                  <h5 className=\"card-text text-left\">Humidity:</h5>\n                  <h5 className=\"card-text text-left\">{IM.main.humidity}%</h5>\n                </div>\n                <div className=\"p-2\">\n                  <h5 className=\"card-text text-left\">Wind:</h5>\n                  <div className=\"d-flex flex-wrap\">\n                    <h5 className=\"card-text text-left\">{IM.wind.speed}</h5>\n                    <p className=\"card-text text-left\">mph</p>\n                    <h5 className=\"card-text text-left\">/ {ME.wind.speed}</h5>\n                    <p className=\"card-text text-left\">kmh</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"card-footer row\">\n          <div className=\"col sm-6 text-left\">\n            <h5 className=\"card-text text-left\">Low:</h5>\n            <div className=\"d-flex flex-wrap\">\n              <h5>{IM.main.temp_min}</h5>\n              <p className=\"card-text text-left\">˚F</p>\n              <h5>/ {ME.main.temp_min}</h5>\n              <p className=\"card-text text-left\">˚C</p>\n            </div>\n          </div>\n          <div className=\"col sm-6 text-left\">\n            <h5 className=\"card-text text-left\">High:</h5>\n            <div className=\"d-flex flex-wrap\">\n              <h5>{IM.main.temp_max}</h5>\n              <p className=\"card-text text-left\">˚F</p>\n              <h5>/ {ME.main.temp_max}</h5>\n              <p className=\"card-text text-left\">˚C</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"card-footer row\">\n          <div className=\"col sm-6 text-left\">\n            <h4 className=\"card-text\">Sunrise: {sunrise}</h4>\n          </div>\n          <div className=\"col sm-6 text-left\">\n            <h4 className=\"card-text\">Sunset: {sunset}</h4>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    return <React.Fragment>{this.renderCity()}</React.Fragment>;\n  }\n}\n\nexport default City;\n\n// <div className=\"card-body row\">\n//           <div className=\"col sm-6 text-left\">\n//             <div className=\"d-flex flex-wrap\">\n//               <div className=\"p-2\">\n//                 <h1 className=\"card-text\">{IM.main.temp}˚F</h1>\n//               </div>\n//               <div className=\"p-2\">\n//                 <h1 className=\"card-text\">{ME.main.temp}˚C</h1>\n//               </div>\n//             </div>\n\n//             <p className=\"card-text\">\n//               Feels like: {IM.main.feels_like}˚F / {ME.main.feels_like}˚C\n//             </p>\n//           </div>\n//           <div className=\"col sm-6 text-left\">\n//             <p className=\"card-text\">\n//               Precipitation: {IM.main.pressure}˚F / {ME.main.temp}˚C\n//             </p>\n//             <p className=\"card-text\">Humidity: {IM.main.humidity}%</p>\n//             <p className=\"card-text\">\n//               Wind: {IM.wind.speed}mph / {IM.wind.speed}km/h\n//             </p>\n//           </div>\n//         </div>\n","import React, { Component } from \"react\";\nimport City from \"./City\";\nimport axios from \"axios\";\nimport dayjs from \"dayjs\";\nconst querystring = require(\"querystring\");\nconst api = require(\"../data//api.json\");\n\nclass Cities extends Component {\n  state = {\n    timestamp: \"\",\n    cities: [\n      {\n        name: \"New York\",\n        ME: {},\n        IM: {},\n      },\n      {\n        name: \"Portland\",\n        ME: {},\n        IM: {},\n      },\n    ],\n  };\n\n  fetchWeatherData = (cities, units) => {\n    // const city = this.state.cities[0].name;\n    // http://api.openweathermap.org/data/2.5/group?id=524901,703448,2643743&units=metric\n    const date = new Date();\n\n    let query = \"\";\n    cities.map((city, index) => {\n      query = query + city.name;\n      if (index !== cities.length - 1) {\n        query = query + \",\";\n      }\n    });\n    const parameters = {\n      appid: api.key,\n      units: units,\n      q: cities[0].name,\n    };\n\n    const url = `https://api.openweathermap.org/data/2.5/weather?${querystring.stringify(\n      parameters\n    )}`;\n\n    return axios.get(url);\n  };\n\n  // call fetch data and persist response data\n  getData = async () => {\n    const data_metric = await this.fetchWeatherData(\n      this.state.cities,\n      \"metric\"\n    );\n    const data_imperial = await this.fetchWeatherData(\n      this.state.cities,\n      \"imperial\"\n    );\n\n    const date = dayjs().format(\"MM-DD-YY h:mma\");\n\n    if (data_metric && data_imperial) {\n      let cities = [...this.state.cities];\n      let city = { ...cities[0] };\n      let city_ME = { ...cities[0].ME };\n      let city_IM = { ...cities[0].IM };\n\n      city_ME = data_metric.data;\n      city_IM = data_imperial.data;\n\n      city = { name: city.name, IM: city_IM, ME: city_ME };\n      cities[0] = city;\n      console.log(cities);\n      this.setState({\n        timestamp: date,\n        cities,\n      });\n    }\n  };\n\n  renderCities = () => {\n    // console.log(\"Cities state:\", this.state.cities[0].main);\n\n    let jsx = [];\n    for (let i = 0; i < this.state.cities.length; i++) {\n      if (this.state.cities[i].IM.main)\n        jsx.push(<City key={i} city={this.state.cities[i]} />);\n    }\n    return jsx;\n  };\n\n  componentDidMount = () => {\n    this.getData();\n  };\n\n  render() {\n    const { timestamp } = this.state;\n    return (\n      <div>\n        {/* <button onClick={this.getData}>Update weather</button> */}\n\n        {timestamp.length > 0 ? <h3>{this.state.timestamp}</h3> : null}\n\n        {this.renderCities()}\n      </div>\n    );\n  }\n}\n\nexport default Cities;\n","import React from \"react\";\nimport \"./App.css\";\nimport Cities from \"./components/Cities\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Cities />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}